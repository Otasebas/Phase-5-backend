exit
quit
event.event_users
event
exit
event.event_users.each do |rsvp|
           invitees.each do |invite|
             if rsvp.user_id == invite[:id]
               rsvp.update(invite_sent: true)
             end
           end
         end
event.event_users.each do |rsvp|
           invitees.each do |invite|
             if rsvp.user_id == invite[:id]
               rsvp.update(havent_sent: true)
             end
           end
         end
event.event_users
invitees
exit
next
invitees
next
exit
params
invitees
next
event
next
q
exit
quit
exit
next
array_of_dates.empty?
next
invites.event_users.all.where(attendance: "accepted").all.map do |even| p true end
invites.event_users.all.where(attendance: "accepted").all.map do |even| true end
invites.event_users.all.where(attendance: "accepted").all.map do |even| true
invites.event_users.all.where(attendance: "accepted").all
invites
events
q
events.empty?
events
quit
q
event.event_users
q
friends[0][:id]
[1,“jan”] => “january”
friends[0].datatype
friends[0]
friends[0].id
friends[0]
friends.map{|friend| friend.id}
user
friends[0]
friends.map{|friend| friend}
friends.map{|friend| friend.id}
group_members.reject! { |member| member.id == current_user.id }
friends.reject! { |friend| group_members.any? { |member| member.id == friend.id } }
next
q
qy
next
group_members
friends
friends.reject! { |friend| group_members.any? { |member| member.id == friend.id } }
event.valid?
user.valid?
user
next
q
finish
break
backward
back
next
group_members
friends
user.valid?
user.valid
user
next
event.valid?
event
continue
q
up
back
friends
next
user
next
event.valid?
event
continue
q
next
group_members
event
next 
friends
next
params[:invites_groups]
params
next
q
params
group_members
next
friends
next
group_members
next
